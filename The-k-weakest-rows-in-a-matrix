class Solution {
public:
    int numOnes( vector<int> row) {
        int low = 0;
        int high = row.size();
        
        while (low < high) {
            int mid = low + (high - low) / 2;
            
            if (row[mid] == 1)
                low = mid + 1;
            else
                high = mid;
        }
        
        return low;
    }
    vector<int> kWeakestRows(vector<vector<int>>& mat, int k) {
    int rows = mat.size();
    int cols = mat[0].size();

    int score[rows];
    int j;
    for (int i = 0; i < rows; i++) {
         j = numOnes(mat[i]);
        score[i] = j * rows + i;
    }
    sort(score,score+rows);
    vector<int>ans(k);
    for (int i = 0; i < k; i++) {
        ans[i] = score[i] % rows;
    }
    return ans;
}  
    
};
